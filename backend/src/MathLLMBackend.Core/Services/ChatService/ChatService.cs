using System.Text;
using MathLLMBackend.Core.Configuration;
using MathLLMBackend.Core.Services.LlmService;
using MathLLMBackend.Core.Services.PromptService;
using MathLLMBackend.DataAccess.Contexts;
using MathLLMBackend.Domain.Entities;
using MathLLMBackend.Domain.Enums;
using MathLLMBackend.GeolinClient;
using MathLLMBackend.GeolinClient.Models;
using MathLLMBackend.Core.Services.ProblemsService;
using MathLLMBackend.ProblemsClient.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System.Runtime.CompilerServices; // Added for EnumeratorCancellation

namespace MathLLMBackend.Core.Services.ChatService;

public class ChatService : IChatService
{
    private readonly AppDbContext _dbContext;
    private readonly ILlmService _llmService;
    private readonly IProblemsService _problemsService;
    private readonly IPromptService _promptService;
    private readonly IOptions<LlmServiceConfiguration> _llmConfig;
    private readonly ILogger<ChatService> _logger;

    public ChatService(
        AppDbContext dbContext, 
        ILlmService llmService, 
        IProblemsService problemsService,
        IPromptService promptService,
        IOptions<LlmServiceConfiguration> llmConfig,
        ILogger<ChatService> logger)
    {
        _dbContext = dbContext;
        _llmService = llmService;
        _problemsService = problemsService;
        _promptService = promptService;
        _llmConfig = llmConfig;
        _logger = logger;
    }
    
    public async Task<Chat> Create(Chat chat, CancellationToken ct)
    {
        chat.Type = ChatType.Chat;
        var res = await _dbContext.Chats.AddAsync(chat, ct);
        await _dbContext.Messages.AddAsync(
            new Message(
                res.Entity,
                _promptService.GetDefaultSystemPrompt(),
                MessageType.System)
            , ct);
        
        await _dbContext.SaveChangesAsync(ct);
        return res.Entity;
    }

    public async Task<Chat> Create(Chat chat, string problemDbId, int explicitTaskType, CancellationToken ct)
    {
        chat.Type = ChatType.ProblemSolver;
        _logger.LogInformation("Creating chat for ProblemSolver. ProblemDB_ID: {ProblemDbId}, ExplicitTaskType: {ExplicitTaskType}", problemDbId, explicitTaskType);

        // 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã LLMath-Problems –ø–æ ID
        var problemFromDb = await _problemsService.GetProblemFromDbAsync(problemDbId, ct);

        if (problemFromDb == null)
        {
            _logger.LogError("Problem with ID {ProblemDbId} not found in LLMath-Problems database.", problemDbId);
            // –ú–æ–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å null/–æ—à–∏–±–∫—É, —á—Ç–æ–±—ã —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–æ—Å—å –≤—ã—à–µ
            // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç –±–µ–∑ —É—Å–ª–æ–≤–∏—è/—Ä–µ—à–µ–Ω–∏—è, —á—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ
            // –õ—É—á—à–µ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã StartUserTask –µ–≥–æ –ø–æ–π–º–∞–ª.
            throw new KeyNotFoundException($"Problem with ID {problemDbId} not found in LLMath-Problems database.");
        }

        string problemCondition = problemFromDb.Statement;
        // –ë–µ—Ä—ë–º –∑–∞—Ä–∞–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–∑ –ë–î
        string? llmSolution = problemFromDb.LlmSolution is string sol && !string.IsNullOrWhiteSpace(sol)
            ? sol
            : problemFromDb.LlmSolution?.ToString();
        if (string.IsNullOrWhiteSpace(llmSolution))
        {
            _logger.LogWarning("Problem {ProblemDbId} from DB has no LLM solution. Tutor solution will not be included.", problemDbId);
        }
        
        _logger.LogInformation("Using problem: {ProblemTitle}, Condition snippet: {ConditionSnippet}", 
            problemFromDb.Id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≤–º–µ—Å—Ç–æ Title
            problemCondition.Substring(0, Math.Min(50, problemCondition.Length)) + "...");

        var addedChatEntityEntry = await _dbContext.Chats.AddAsync(chat, ct);
        await _dbContext.SaveChangesAsync(ct); 
        var newChatEntity = addedChatEntityEntry.Entity;

        int taskTypeToUse = explicitTaskType;
        string systemPromptText = _promptService.GetSystemPromptByTaskType(taskTypeToUse);
        
        var userTask = await _dbContext.UserTasks
            .FirstOrDefaultAsync(ut => ut.ProblemHash == problemDbId && 
                                   ut.ApplicationUserId == chat.UserId && 
                                   ut.Status == UserTaskStatus.InProgress, ct);
        if (userTask != null)
        {
            userTask.AssociatedChatId = newChatEntity.Id;
            _dbContext.UserTasks.Update(userTask);
        }
        
        var systemMessage = new Message(newChatEntity, systemPromptText, MessageType.System);
        Message? solutionMessageForLlm = null;
        if (taskTypeToUse != 3 && !string.IsNullOrWhiteSpace(llmSolution)) // –ù–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ –≠–∫–∑–∞–º–µ–Ω–∞ –∏ –µ—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –µ—Å—Ç—å
        {
            var tutorSolutionText = _promptService.GetTutorSolutionPrompt(llmSolution); // –ü–µ—Ä–µ–¥–∞–µ–º –≥–æ—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ LLM
            solutionMessageForLlm = new Message(newChatEntity, tutorSolutionText, MessageType.User, isSystemPrompt: true);
        }
        
        var conditionTextForDisplay = $"üü¢ **–£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:** ({problemFromDb.Id})\n\n{problemCondition}\n\n";
        var conditionMessageForDisplay = new Message(newChatEntity, conditionTextForDisplay, MessageType.Assistant);
        
        var messagesToSaveInDb = new List<Message> { systemMessage, conditionMessageForDisplay };
        if (solutionMessageForLlm != null)
        {
             messagesToSaveInDb.Add(solutionMessageForLlm);
        }
        await _dbContext.Messages.AddRangeAsync(messagesToSaveInDb, ct);
        
        await _dbContext.SaveChangesAsync(ct);
        
        var initialPromptForLlm = _promptService.GetInitialPromptByTaskType(taskTypeToUse, problemCondition, "");
        var messagesForInitialBotGeneration = new List<Message> { systemMessage };
        if (solutionMessageForLlm != null) messagesForInitialBotGeneration.Add(solutionMessageForLlm);
        // –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏ LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
        messagesForInitialBotGeneration.Add(new Message(newChatEntity, problemCondition, MessageType.User, isSystemPrompt: true)); 
        messagesForInitialBotGeneration.Add(new Message(newChatEntity, initialPromptForLlm, MessageType.User, isSystemPrompt: true));

        _logger.LogInformation("Start initial LLM generation for chat {ChatId} | taskType = {TaskTypeToUse}", newChatEntity.Id, taskTypeToUse);
        var initialBotMessageText = await _llmService.GenerateNextMessageAsync(messagesForInitialBotGeneration, taskTypeToUse, ct);
        _logger.LogInformation("Initial bot message generated for chat {ChatId} | taskType = {TaskTypeToUse}", newChatEntity.Id, taskTypeToUse);
        
        var botInitialDisplayMessage = new Message(newChatEntity, initialBotMessageText, MessageType.Assistant);
        await _dbContext.Messages.AddAsync(botInitialDisplayMessage, ct);
        await _dbContext.SaveChangesAsync(ct);
        
        return newChatEntity;
    }

    public async Task<List<Chat>> GetUserChats(string userId, CancellationToken ct)
    {
        var chats = await _dbContext.Chats.Where(c => c.User.Id == userId).ToListAsync(cancellationToken: ct);
        // –ù–µ —É–≤–µ—Ä–µ–Ω, –Ω—É–∂–µ–Ω –ª–∏ –∑–¥–µ—Å—å SaveChangesAsync, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è
        // await _dbContext.SaveChangesAsync(ct);
        return chats;
    }

    public async Task Delete(Chat chat, CancellationToken ct)
    {
        _dbContext.Chats.Remove(chat);
        await _dbContext.SaveChangesAsync(ct);
    }
    
    public async IAsyncEnumerable<string> CreateMessage(Message message, [EnumeratorCancellation] CancellationToken ct)
    {
        await _dbContext.Messages.AddAsync(message, ct); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await _dbContext.SaveChangesAsync(ct); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è LLM

        var currentChat = await _dbContext.Chats
            .Include(c => c.Messages) // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            .FirstOrDefaultAsync(c => c.Id == message.ChatId, ct);

        if (currentChat == null)
        {
            _logger.LogError("Chat with ID {ChatId} not found in CreateMessage.", message.ChatId);
            yield break; 
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º taskType –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.
        // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –í –∏–¥–µ–∞–ª–µ, taskType –¥–æ–ª–∂–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ —Å–∞–º–æ–º Chat –∏–ª–∏ UserTask.
        int taskType = 0; 
        var systemMessageInHistory = currentChat.Messages.FirstOrDefault(m => m.MessageType == MessageType.System);
        
        if (currentChat.Type == ChatType.ProblemSolver)
        {
             var userTask = await _dbContext.UserTasks
                .FirstOrDefaultAsync(ut => ut.AssociatedChatId == currentChat.Id, ct);
            if (userTask != null) taskType = userTask.TaskType;
            else if (systemMessageInHistory != null) // –ü—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É –µ—Å–ª–∏ UserTask –Ω–µ—Ç
            {
                if(systemMessageInHistory.Text == _promptService.GetLearningSystemPrompt()) taskType = 1;
                else if(systemMessageInHistory.Text == _promptService.GetGuidedSystemPrompt()) taskType = 2;
                else if(systemMessageInHistory.Text == _promptService.GetExamSystemPrompt()) taskType = 3;
            }
        }
        // –î–ª—è ChatType.Chat taskType –æ—Å—Ç–∞–Ω–µ—Ç—Å—è 0 (Default/Tutor)
        
        _logger.LogInformation("Generating response in chat {ChatId} | taskType = {TaskType}", currentChat.Id, taskType);
        
        var messagesForLlm = currentChat.Messages.ToList();
        
        // –í —Ä–µ–∂–∏–º–µ —ç–∫–∑–∞–º–µ–Ω–∞ (3) –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º LLM —Å–∫—Ä—ã—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –±—ã–ª–æ
        if (taskType == 3)
        {
            messagesForLlm.RemoveAll(m => m.IsSystemPrompt && m.MessageType == MessageType.User && m.Text.Contains("–í–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞"));
        }

        var llmResponseStream = _llmService.GenerateNextMessageStreaming(messagesForLlm, taskType, ct);

        var fullText = new StringBuilder();
        await foreach (var messageTextChunk in llmResponseStream)
        {
            fullText.Append(messageTextChunk);
            yield return messageTextChunk;
        }
        
        var newAssistantMessage = new Message(currentChat, fullText.ToString(), MessageType.Assistant);
        _dbContext.Messages.Add(newAssistantMessage);
        await _dbContext.SaveChangesAsync(ct);
    }
    
    public async Task<List<Message>> GetAllMessageFromChat(Chat chat, CancellationToken ct)
    {
        return await _dbContext.Messages.Where(m => m.ChatId == chat.Id).OrderBy(m=>m.CreatedAt).ToListAsync(ct);
    }

    public async Task<Chat?> GetChatById(Guid id, CancellationToken ct)
    {
        return await _dbContext.Chats
            .Include(c => c.User)
            .FirstOrDefaultAsync(c => c.Id == id, cancellationToken: ct);
    }

    public async Task<Guid> GetOrCreateProblemChatAsync(string problemHash, string userId, string taskDisplayName, int taskType, CancellationToken ct)
    {
        var chatName = $"{taskDisplayName} {DateTime.Now:dd.MM.yyyy HH:mm}";
        var newChatEntity = new Chat
        {
            Name = chatName,
            UserId = userId,
            Type = ChatType.ProblemSolver // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø
        };

        // –ü–µ—Ä–µ–¥–∞–µ–º taskType –≤ –º–µ—Ç–æ–¥ Create
        var createdChat = await Create(newChatEntity, problemHash, taskType, ct);
        return createdChat.Id;
    }

    public async Task<Message?> GetMessageId(Guid id, CancellationToken ct)
    {
        return await _dbContext.Messages.FirstOrDefaultAsync(c => c.Id == id, cancellationToken: ct);
    }
}
